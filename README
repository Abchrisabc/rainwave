This is the git project for the Rainwave website at http://rainwave.cc

It is currently in a major state of flux as we transition from Rainwave 3 to 4,
eliminating all our old PHP in the process.

== Required Modules and Executables

Required on all systems:
- tornado (webserver, minimum version 2.3)
- sqlite3 (database)
- psycopg 2.x (database)
- mutagen (ID3 tag reader)
- nose (test library)
- PIL (album art) [Debian: python-imaging, Gentoo: dev-python/imaging, pip: pil]
- psutil (nice and ionice)
- pyScss (CSS/SASS compiling)
- jsmin

Required on POSIX:
- pyinotify (filesystem monitoring)
- pylibmc (preferred, C wrapper) or python-memcached (pure Python)

Required on Windows:
- python-memcached

To let Rainwave automatically mp3gain your collection, you will need to enable it
in the configs and also have the "mp3gain" executable in your system path.

== Git

Recommended .git/hooks/pre-commit:
	#!/bin/bash
	python runtests.py --api
	exit $?

To see the TODO list, just grep the code:
	grep -r TODO
	
== Database

Rainwave supports sqlite for testing, and only Postgres in production environments.

You may notice throughout the program that many UPDATE statements are
broken out into loops, rather than letting the database handle it in a JOIN.
There's a reason for this, and until there's a better
way of handling these scenarios, they are greppable by searching for
SQLITE_CANNOT_DO_JOINS_ON_UPDATES.

== Running sqlite tests

1. Copy rainwave_test.conf to [your username].conf
2. Modify the config for your OS (assumes Linux by default)
3. runtests.py

== Initial setup for Postgres testing environment

1. Install Python, Postgres, memcached, and Python modules
2. Copy rainwave_test.conf to [your username].conf
3. Modify config to fit your environment and OS
4. Modify the config to point at your music collection (MP3 only, sorry)
5. db_init.py --config etc/[username].conf
6. rw_scanner.py --full --config /etc/[username].conf
7. runtests.py