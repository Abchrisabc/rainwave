This is the git project for the Rainwave website, http://rainwave.cc.

== Quick Module Install for Debian/Ubuntu

$ sudo apt-get install python-pyscss python-psycopg2 python-mutagen python-nose python-imaging python-psutil python-unidecode python-pyinotify python-pylibmc python-tornado python-objgraph
$ sudo pip install jsmin
$ sudo pip install pytz

== Getting Started for Web Development

$ git clone git@github.com:rmcauley/rainwave.git
$ cp etc/rainwave-dev.conf etc/[your username].conf
$ python rw_api.py

That's it!

HTML files can be found in templates.
CSS files are in static/style4 and compiled using SCSS.
JS files are in static/js4 and are not minified for beta development.

All files are refreshed (not served from cache) as you edit them, no need
to restart the server.

== Getting Started for Backend Development

Setup PostgreSQL on your system and change your Rainwave config file
to use Postgres instead of SQLite.  The Rainwave Pg role must have the ability
to create tables.  You must also have your own MP3 collection, and change the
song_dirs configuration in your rainwave.conf to point to your collection.
Tags are important!

$ python db_init.py
$ python rw_scanner.py --full

Once done, run the backend (rw_backend.py) and the API (rw_api.py)
at the same time. When you want to trigger a song switch,
use rw_get_next.py.

== Required Modules and Executables in Detail

Required on all systems:
- tornado
- sqlite3
- psycopg2
- mutagen
- nose
- PIL [Debian: python-imaging, Gentoo: dev-python/imaging, pip: pil]
- psutil
- pyScss
- jsmin (>2.0.6)
- unidecode
- pytz
- objgraph
- pyinotify (POSIX only)
- pylibmc (POSIX) or python-memcached (Windows/PyPy)

To let Rainwave automatically mp3gain your collection, you will need to enable it
in the configs and also have the "mp3gain" executable in your path.
